{  
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"",
    "Parameters":{  
       "HostedZoneId":{  
          "Type":"String",
          "Description":"The ID Of The Hosted Zone Where The Certificate's Records Will Be Added",
          "Default":"Z2STHFEWPT6599"
       },
       "MainDomainName":{  
          "Type":"String",
          "Description":"The Domain Name To Which The Certificate Will Be Issued",
          "Default":"dicky.world"
       }
    },
    "Resources":{  
       "ACMApproverRole":{  
          "Type":"AWS::IAM::Role",
          "Properties":{  
             "AssumeRolePolicyDocument":{  
                "Version":"2012-10-17",
                "Statement":[  
                   {  
                      "Effect":"Allow",
                      "Principal":{  
                         "Service":"lambda.amazonaws.com"
                      },
                      "Action":"sts:AssumeRole"
                   }
                ]
             },
             "Path":"/",
             "Policies":[  
                {  
                   "PolicyName":"ACMCFNLambdaPolicy",
                   "PolicyDocument":{  
                      "Version":"2012-10-17",
                      "Statement":[  
                         {  
                            "Effect":"Allow",
                            "Action":[  
                               "logs:CreateLogGroup",
                               "logs:CreateLogStream",
                               "logs:PutLogEvents"
                            ],
                            "Resource":"*"
                         },
                         {  
                            "Effect":"Allow",
                            "Action":[  
                               "acm:*",
                               "route53:*"
                            ],
                            "Resource":"*"
                         }
                      ]
                   }
                }
             ]
          }
       },
       "ACMLambdaFunction":{  
          "Type":"AWS::Lambda::Function",
          "Properties":{  
             "Code":{  
                "ZipFile":"import sys,os,json,datetime,boto3,traceback,time,hashlib\nfrom botocore.vendored import requests\nfrom datetime import date, datetime\ndef json_serial(obj):\n    if isinstance(obj, (datetime, date)):\n        return obj.isoformat()\n    raise TypeError (\"Type %s not serializable\" % type(obj))\ndef cfn_response(url, body):\n    headers = {'content-type' : '','content-length' : str(len(body))}\n    response = requests.put(url,data=body,headers=headers)\ndef acm_certificate(event, context):\n    print \"Got %s\" % json.dumps(event, default=json_serial)\n    if event['RequestType'] in ['Create','Update']:\n        cfn_response(event['ResponseURL'], _create_acm_certificate(event))\n    else:\n        cfn_response(event['ResponseURL'], _delete_acm_certificate(event))\ndef _create_acm_certificate(event):\n    acm = boto3.client('acm')\n    ret = {}\n    ret['StackId'] = event['StackId']\n    ret['RequestId'] = event['RequestId']\n    ret['LogicalResourceId'] = event['LogicalResourceId']\n    rp = event['ResourceProperties']\n    try:\n        cs = rp['DomainSuffix'].rstrip('.')\n        dn = \"%s.%s\" % (rp['DomainName'].rstrip('.'), cs)\n        san = dn\n        if len(dn) > 62:\n            hashlen = 62-len(cs)\n            ch = hashlib.sha256(dn).hexdigest()[-hashlen:]\n            dn = \"%s.%s\" % (ch, cs)\n        response = acm.list_certificates(\n            CertificateStatuses=['PENDING_VALIDATION','ISSUED']\n        )\n        cert_arn = None\n        for cert in response['CertificateSummaryList']:\n            print \"existing cert: %s\" % cert['DomainName']\n            if cert['DomainName'] == dn:\n                cert_arn = cert['CertificateArn']\n\n        if not cert_arn:\n            response = acm.request_certificate(\n                DomainName=dn,\n                ValidationMethod='DNS',\n                IdempotencyToken=event['LogicalResourceId'],\n                SubjectAlternativeNames = [san]\n            )\n            cert_arn = response['CertificateArn']\n            time.sleep(10)\n\n        response = acm.describe_certificate(\n            CertificateArn=cert_arn\n        )\n        r53_c = []\n        for vo in response['Certificate']['DomainValidationOptions']:\n            rr = vo['ResourceRecord']\n            r53_c.append({'Action':'UPSERT','ResourceRecordSet':{'Name': rr['Name'],'Type': rr['Type'],'TTL': 3600,'ResourceRecords': [{'Value': rr['Value']}]}})\n\n        r53 = boto3.client('route53')\n        response = r53.change_resource_record_sets(\n            HostedZoneId=rp['HostedZoneId'],\n            ChangeBatch={'Comment':'Auth','Changes':r53_c}\n        )\n        time.sleep(220)\n\n        ret['PhysicalResourceId'] = cert_arn\n        ret['Data'] = {}\n        ret['Data']['CertificateArn'] = cert_arn\n        ret['Status'] = 'SUCCESS'\n    except:\n        traceback.print_exc()\n        ret['Status'] = 'FAILED'\n        ret['Reason'] = 'Good question'\n    finally:\n        cfn_response(event['ResponseURL'], json.dumps(ret))\n    return json.dumps(ret)\n\ndef _delete_acm_certificate(event):\n    acm = boto3.client('acm')\n    ret = {}\n    ret['StackId'] = event['StackId']\n    ret['RequestId'] = event['RequestId']\n    ret['LogicalResourceId'] = event['LogicalResourceId']\n    ret['PhysicalResourceId'] = event['PhysicalResourceId']\n    try:\n        response = acm.delete_certificate(\n            CertificateArn=event['PhysicalResourceId']\n        )\n        print \"got response %s\" % json.dumps(response, default=json_serial)\n        ret['Status'] = 'SUCCESS'\n    except:\n        traceback.print_exc()\n        ret['Status'] = 'SUCCESS'\n        ret['Reason'] = 'Good question'\n    finally:\n        cfn_response(event['ResponseURL'], json.dumps(ret))\n\n    return json.dumps(ret)\n"
             },
             "Description":"CloudFormation Custom Resource for ACM Certs Using Route53 Approval",
             "Handler":"index.acm_certificate",
             "MemorySize":256,
             "Runtime":"python2.7",
             "Timeout":300,
             "Role":{  
                "Fn::GetAtt":"ACMApproverRole.Arn"
             }
          }
       },
       "Certificate":{  
          "Type":"Custom::ACMCertificate",
          "Version":"1.0",
          "Properties":{  
             "ServiceToken":{  
                "Fn::GetAtt":[  
                   "ACMLambdaFunction",
                   "Arn"
                ]
             },
             "DomainName":"*",
             "DomainSuffix":{  
                "Ref":"MainDomainName"
             },
             "HostedZoneId":{  
                "Ref":"HostedZoneId"
             }
          }
       }
    },
    "Outputs":{  
       "AcmCertificateArn":{  
          "Value":{  
             "Ref":"Certificate"
          },
          "Description":"The ACM Certificate ARN"
       }
    }
 }